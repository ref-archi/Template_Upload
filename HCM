{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Adop Core Generation 5 CloudFormation",
  "Mappings": {
    "RegionMap": {
      "eu-central-1": {
        "CENTOSAMI": "ami-9bf712f4",
        "AWSLINUXAMI": "ami-ea26ce85",
        "NATAMI": "ami-ae380eb3",
        "RHELAMI": "ami-875042eb"
      },
      "eu-west-1": {
        "CENTOSAMI": "ami-7abd0209",
        "AWSLINUXAMI": "ami-f9dd458a",
        "NATAMI": "ami-14913f63",
        "RHELAMI": "ami-8b8c57f8",
        "UBUNTUAMI": "ami-f95ef58a"
      },
      "us-east-1": {
        "CENTOSAMI": "ami-6d1c2007",
        "AWSLINUXAMI": "ami-6869aa05",
        "NATAMI": "ami-184dc970",
        "RHELAMI": "ami-2051294a"
      },
      "us-west-2": {
        "CENTOSAMI": "ami-d2c924b2",
        "AWSLINUXAMI": "ami-7172b611",
        "NATAMI": "ami-290f4119",
        "RHELAMI": "ami-775e4f16"
      },
      "us-west-1": {
        "CENTOSAMI": "ami-af4333cf",
        "AWSLINUXAMI": "ami-31490d51",
        "NATAMI": "ami-a98396ec",
        "RHELAMI": "ami-d1315fb1"
      },
      "ap-southeast-1": {
        "CENTOSAMI": "ami-f068a193",
        "AWSLINUXAMI": "ami-a59b49c6",
        "NATAMI": "ami-6aa38238",
        "RHELAMI": "ami-e0c19f83"
      },
      "ap-southeast-2": {
        "CENTOSAMI": "ami-fedafc9d",
        "AWSLINUXAMI": "ami-dc361ebf",
        "NATAMI": "ami-893f53b3",
        "RHELAMI": "ami-e0c19f83"
      },
      "ap-northeast-1": {
        "CENTOSAMI": "ami-eec1c380",
        "AWSLINUXAMI": "ami-374db956",
        "NATAMI": "ami-27d6e626",
        "RHELAMI": "ami-e0c19f83"
      },
      "ap-northeast-2": {
        "CENTOSAMI": "ami-c74789a9",
        "AWSLINUXAMI": "ami-2b408b45",
        "NATAMI": "ami-68a46f06",
        "RHELAMI": "ami-e0c19f83"
      },
      "sa-east-1": {
        "CENTOSAMI": "ami-26b93b4a",
        "AWSLINUXAMI": "ami-6dd04501",
        "NATAMI": "ami-8122969c",
        "RHELAMI": "ami-e0c19f83"
      }
    }
  },
  "Outputs": {
    "ReleaseNote": {
      "Description": "This is your starting point, please copy this URL into your web browser.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "AdopEC2",
                "PublicIp"
              ]
            },
            "/"
          ]
        ]
      }
    },
    "ComposeRepository": {
        "Description": "Repository URL of the configurations of the tooling platform.",
        "Value": {
            "Ref": "ComposeRepository"
        }
    },
    "ComposeRepoBranch": {
        "Description": "Branch name of repository URL of the configurations of the tooling platform.",
        "Value": {
            "Ref": "ComposeRepoBranch"
        }
    },
    "AdopUsername": {
        "Description": "ADOP Admin account username.",
        "Value": {
            "Ref": "AdopUsername"
        }
    }
  },
  "Parameters": {
    "ComposeRepository": {
        "Default": "https://github.com/paoloxide/adop-docker-compose.git",
        "Description": "Comprised of the configurations for the tooling platform",
        "Type": "String"
    },
    "ComposeRepoBranch": {
      "Default": "hcm",
      "Description": "Branch name in the compose repository to be used.",
      "Type": "String"
    },
    "AdopWorkspace": {
      "Default": "None",
      "Description": "Initialise a Jenkins workspace folder.",
      "Type": "String"
    },
    "AdopUsername": {
      "Default": "",
      "Description": "ADOP admin account username.",
      "Type": "String"
    },
    "AdopUserPassword": {
      "NoEcho": "true",
      "Description": "ADOP admin account password. Example allowed password: n0tyourusername123",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "15",
      "ConstraintDescription": "You are not allowed to include your 'username' or 'password' in your password! Minimum Length of 8 characters and must contain a number."
    },
    "KeyName": {
      "Default": "academy_key",
      "Description": "Key-pair name to use.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "EC2InstanceType": {
      "Type": "String",
      "Description": "ADOP Core Centos 7 EC2 HVM instance type. Please make sure that you have previously agreed the terms and conditions in this link https://aws.amazon.com/marketplace/pp/B00O7WM7QW.",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.xlarge",
        "m3.xlarge",
        "m3.2xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type.",
      "Default": "m4.xlarge"
    }
  },
  "Resources": {
    "ElasticIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "InstanceId": {
          "Ref": "AdopEC2"
        }
      }
    },
    "AdopEC2": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeSize": 100,
              "VolumeType": "gp2"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "AdopSecurityGroup"
              }
            ],
            "PrivateIpAddress": "10.10.1.101",
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AWSLINUXAMI"
          ]
        },
        "InstanceType": {
          "Ref": "EC2InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "AdopEC2"
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
               "#!/bin/bash\n",
                "export IP=$(hostname --ip-address)\n",
                "until [[ $(rpm -qa docker | wc -l) -gt 0 ]]; do yum -y install docker; echo \"Waiting until docker is installed..\"; sleep 5; done\n",
                "service docker start\n",
                "chkconfig docker on\n",
                "curl -L https://github.com/docker/compose/releases/download/1.7.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n",
                "chmod +x /usr/local/bin/docker-compose && ln -sv /usr/local/bin/docker-compose /usr/bin/docker-compose\n",
                "yum -y install git\n",
                "mkdir /adop && cd /adop\n",
                "git clone ",
                {
                    "Ref": "ComposeRepository"
                },
                " -b ",
                {
                    "Ref": "ComposeRepoBranch"
                },
                "\n",
                "chmod -R 700 /adop/adop-docker-compose\n",
                "cd /adop/adop-docker-compose\n",
                "sleep 10\n",
                "export PUBLIC_IP=$(curl http://instance-data/latest/meta-data/public-ipv4)\n",
                "echo \"\n",
                "export SMTP_DOMAIN=amazonaws.com\n",
                "export ADOP_HOME=\"/adop/adop-docker-compose\"\n",
                "export PUBLIC_IP=$PUBLIC_IP\n",
                "export TARGET_HOST=10.10.1.101\n",
                "export LOGSTASH_HOST=10.10.1.101\n",
                "export VOLUME_DRIVER=local\n",
                "export CUSTOM_NETWORK_NAME=adop-network\n",
                "export ADOP_SMTP_ENABLED=true\n",
                "export AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "export VPC_ID=",
                {
                  "Ref": "Vpc"
                },
                "\n",
                "export DEFAULT_PUBLIC_SUBNET_ID=",
                {
                  "Ref": "PublicSubnet"
                },
                "\n",
                "export DEFAULT_RHEL_AMI=",
                {
                  "Fn::FindInMap": [
                    "RegionMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "RHELAMI"
                  ]
                },
                "\n",
                "export DEFAULT_CENTOS_AMI=",
                {
                  "Fn::FindInMap": [
                    "RegionMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "CENTOSAMI"
                  ]
                },
                "\n",
                "export DEFAULT_AWS_LINUX_AMI=",
                {
                  "Fn::FindInMap": [
                    "RegionMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "AWSLINUXAMI"
                  ]
                },
                "\n",
                "export DEFAULT_KEY_PAIR=",
                {
                  "Ref": "KeyName"
                },
                "\n",
                "export INITIAL_ADMIN_USER=",
                {
                  "Ref": "AdopUsername"
                },
                "\n",
                "export INITIAL_ADMIN_PASSWORD_PLAIN=",
                {
                  "Ref": "AdopUserPassword"
                },
				"\n",
                "export COMPOSE_OVERRIDES='-f etc/volumes/local/default.yml -f etc/logging/syslog/default.yml'\n",
                "\"> cloudformation_vars.sh\n",
                "source cloudformation_vars.sh\n",
                "source credentials.generate.sh\n",
                "source env.config.sh\n",
                "mkdir -p mail-config\n",
                "docker run --rm -e MAIL_USER=${INITIAL_ADMIN_USER}@${LDAP_DOMAIN} -e MAIL_PASS=${INITIAL_ADMIN_PASSWORD_PLAIN} tvial/docker-mailserver:v2 /bin/sh -c 'echo \"$MAIL_USER|$(doveadm pw -s SHA512-CRYPT -u $MAIL_USER -p $MAIL_PASS)\"' >> mail-config/postfix-accounts.cf\n",
                "docker run --rm -v \"$(pwd)/mail-config\":/tmp/docker-mailserver tvial/docker-mailserver:v2 generate-dkim-config\n",
                "docker network create ${CUSTOM_NETWORK_NAME}\n",
                "docker-compose -f compose/elk.yml up -d\n",
                "docker-compose -f compose/mailserver.yml up -d\n",
                "docker-compose -f compose/jira.yml up -d\n", 
                "docker-compose -f docker-compose.yml ${COMPOSE_OVERRIDES} up -d\n",
                {
                  "Ref": "AdopWorkspace"
                },
                "\n",
                "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\",",
                "\"Reason\" : \"ADOP is ready\",",
                "\"UniqueId\" : \"IDAdopCompletion\",",
                "\"Data\" : \"Done\"}' ",
                "\"",
                {
                  "Ref": "AdopWaitConditionHandle"
                },
                "\"\n",
                "\n",
                "docker exec -it proxy service php5-fpm start\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "PublicRouteDefault": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcInternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSubnet": {
      "Properties": {
        "CidrBlock": "10.10.1.0/24",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetPublicRouteTableAssoc": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "Vpc": {
      "Properties": {
        "CidrBlock": "10.10.0.0/16",
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true"
      },
      "Type": "AWS::EC2::VPC"
    },
    "VpcGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcInternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "VpcInternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AdopSecurityGroup": {
      "Properties": {
        "GroupDescription": "Swarm Proxy Security Group",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "8082",
            "IpProtocol": "tcp",
            "ToPort": "8082"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "AdopWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Handle": {
          "Ref": "AdopWaitConditionHandle"
        },
        "Timeout": "3500"
      }
    },
    "AdopWaitConditionHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    }
   }
}